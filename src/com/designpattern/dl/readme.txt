1、创建型：单例模式、工厂方法模式、抽象工厂模式、建造者模式、原型模式
（1）单例模式（有上限的多例模式）：
构造方法私有法，静态块中new对象，向外界提供获取对象方法
实例：皇帝只有一个（Emperor类）

（2）工厂方法模式：
通过工厂创建产品实例，可以针对不同产器有多个工厂，也可以采用泛型
可以替代单例模式（通过映射创建单例对象）
可以延改初始化（即不马上释放，而置于一列表成员变量中）
实例：造各种肤色的人

（3）抽象工厂模式（产品族有共同约束）：
产品系列化，相当于产品族的工厂方法模式，工厂类为约束种类数量
拓展约束是很容易的，拓展产器族会破坏开闭原则。
实例：造各种不同性别、不同肤色的人。这里的共同约束为性别，每种肤色都有男女之分
     或者不同类型、不同厂商的计算机。这里共同约束为计算机类型，每个厂商都会生产台式机、笔记本类型。

（4）建造者模式：
产器的构建顺序不同得到的对象不同
不同的产品对应不同的构建类，可在集中处拥有所有的构建类对象，提供给外界获取不同产品的方法
实例：不同的车，它们的构建顺序不一样。

（5）原型模式：
通过clone对象，注意是深复制
因为直接从内存拷贝，而不需要new对象，当对象特别多时性能会提升。
实例：发送邮件，每次复制一份。

2、结构型：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式
（1）适配器模式：
有类适配器（继承）与对象适配器（引用），前者用于源只有一个，后者用于源不只一个。
实例：本公司员工信息与外借员工信息不匹配时引进适配器

（2）装饰器模式：
不仅继承源类，同时引用源类。继承是为了多层装饰，引用是为了避免多层继承。
实例：成绩单的各种装饰，采用一层继承

（3）代理模式：
普通代理：直接由代理操作真实对象
强制代理：必须由真实对象获得代理，有静态代理、动态代理
                   静态代理：真实对象绑定代理，提供获取绑定代理的方法
                   动态代理 ：InvocationHandler接口、DynamicProxy类
实例：游戏代练（三种实现）
                   
（4）组合模式：
对象有部分－整体的性质，通过组合模式达到操作一致的目的。
比如：文件与文件夹、叶子与分支
实例：公司部门的层级划分

 
（5）享元模式：
当对象数量特别大时，同时对象属性可以表现为共享状态与外部状态。
共享状态不会变化，外部状态的数量一定，随环境会改变。
将外部状态提取对象，共享状态作为附加信息。   
实例：报名信息获取

（6）桥接模式：
抽象类引用具体实现类，从而实现两个独立部分解耦
比如工厂与产品没必要绑定在一起，工厂引用产品类，从而不同的公司，不同的产品可以自由拓展
实例：公司生产不同产品

（7）门面模式：
子系统不想暴露给外部，而仅仅通过一人门面访问子系统内部。
门面拥有整个子系统的访问权，子系统的改变对门面的影响比较大。 
实例：发邮件子系统             

3、行为型：策略模式、模板方法模式、观察者模式、责任链模式、命令模式、迭代模式、
                     访问者模式、中介者模式、解释器模式、状态模式、备忘录模式
（1）策略模式：
提供一个策略接口，通过不同的实现类实现不现的策略。
角色类引用该策略，并赋于不同的具体实现策略。
实例：诸葛亮送的三个锦囊

（2）模板方法模式：  
 一个操作需要几个步骤组成，制定该操作算法的框架。
 引用构子方法（逻辑判断），子类可以影响算法的过程。 
 实例：车子的一轮操作
 
 （3）观察者模式：
 观察者被被观察者引用，并由被观察者触发观察者。
 通过java的Observable、Observer实现该模式。
 实例：李斯监视韩非子
 
 （4）责任链模式：
不现的实际处理者有着一定的责任传递关系。
请示者传入参数后，具体的处理链不用管。
比如一站式服务，客户只需传入基本信息，后面的业务办理分别一层一层地传递下去。
实例：古时候妇女出门请示
 
 （5）访问者模式：
 一般用于不同的访问者需要在数据中访问自己感兴趣的信息时采用该模式。
 访问者引用元素对象的接口，不同的元素对象接收不同的访问者。
 实例：老板访问公司员工信息
 
 （6）中介者模式：
 中介者负责不现对象的协同工作，实际对象有一个统一的抽象类知道中介者
 中介者可以多个，以便更好的符合单一职责原则
 实例：不同部门协同工作
 
 （7）迭代器模式：
 一般不用，用于访问的集体已实现。
 
 （8）状态模式：
 一个对象内在状态改变时允许改变其行为，这个对象看起来改变了其类。
 比如电梯对象不同状态改变行为，似乎是不同类执行行为。
 实例：电梯的不同状态执行各种行为
 
 （9）解释器模式：
 需要该模式，可以参考Expression4J、MESP、JeP
一般涉及到递归
需要解释的表达式可以分为终结表达式+非终结表达式（+、－），往往最终存放的是一个递归的表达式。
求解的时候对递归表达式按终结表达式、非终结表达式的解释逐步化解。
实例：数学表达式的计算
 
 （10）命令模式：
 分发命令者的类引用命令接口，命令类中引用具体的命令接收者，从而通知接收者完成命令。
 实例：公司上级对下级部门发送命令
 
 （11）备忘录模式：
 对于发起者角色，增加一个备忘角色保存发起者角色的状态以方便备忘管理者调用去恢复发起者。 
可以将发起者角色与备忘角色合一化，发起者类引用自己，当需要备份的时候通过clone一 份存放引用处。
备份多状态，可以利用BeanUtil类去执行备份恢复操作。备份角色需要增加一映射表存放不多个状态对应的值。
多备份状态，通过映射实现，映射的值直接为发起者角色对象。    
实例：男孩追女孩    
 